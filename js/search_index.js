var search_data = {"index":{"searchIndex":["fileutils","module","object","rake","application","cleaner","dsl","defaultloader","earlytime","filecreationtask","filelist","filetask","fileutilsext","invocationchain","emptyinvocationchain","invocationexceptionmixin","latetime","linkedlist","emptylinkedlist","makefileloader","multitask","namespace","packagetask","privatereader","classmethods","rakefileutils","rulerecursionoverflowerror","scope","emptyscope","task","taskargumenterror","taskarguments","tasklib","taskmanager","testtask","win32","win32homeerror","string","*()","<<()","<=>()","<=>()","==()","==()","[]()","[]()","[]()","[]()","[]()","add()","add_description()","add_loader()","add_rakelib()","add_target()","all_prerequisite_tasks()","append()","append()","append()","application()","application=()","arg_names()","chain()","chain=()","clear()","clear()","clear()","clear_actions()","clear_args()","clear_comments()","clear_exclude()","clear_prerequisites()","comment()","conj()","cons()","cons()","create_rule()","current_scope()","define()","define()","define_task()","desc()","directory()","each()","each()","egrep()","empty()","empty?()","empty?()","enhance()","enhance_with_matching_rule()","exclude()","excluded_from_list?()","execute()","existing()","existing!()","ext()","ext()","extras()","fetch()","file()","format_deps()","full_comment()","generate_did_you_mean_suggestions()","generate_message_for_undefined_task()","glob()","gsub()","gsub!()","has_key?()","import()","in_namespace()","include()","init()","init()","inspect()","intern()","investigation()","invoke()","invoke_with_call_chain()","is_a?()","key?()","kind_of?()","load()","load_rakefile()","load_rakefile()","lookup()","make()","member?()","member?()","message()","method_missing()","multitask()","name()","namespace()","needed?()","needed?()","needed?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_scope()","nowrite()","nowrite()","options()","original_dir()","package_dir_path()","package_name()","pathmap()","pathmap()","pathmap_explode()","pathmap_partial()","pathmap_replace()","prerequisite_tasks()","rake_check_options()","rake_check_options()","rake_output_message()","rake_output_message()","reenable()","resolve()","resolve_args()","ruby()","rule()","run()","run_with_threads()","safe_ln()","scope()","scope_name()","set_arg_names()","sh()","source()","sources()","split_all()","sub()","sub!()","tar_bz2_file()","tar_gz_file()","tar_xz_file()","target_dir()","task()","task_defined?()","tasks()","tasks()","tasks()","tasks_in_scope()","test_files=()","tgz_file()","timestamp()","timestamp()","timestamp()","to_a()","to_a()","to_ary()","to_hash()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","top_level()","values_at()","verbose()","verbose()","when_writing()","when_writing()","with_application()","with_defaults()","working_dir()","zip_file()","|()","contributing","history","mit-license","readme","command_line_usage","glossary","proto_rake","rakefile","rational"],"longSearchIndex":["fileutils","module","object","rake","rake::application","rake::cleaner","rake::dsl","rake::defaultloader","rake::earlytime","rake::filecreationtask","rake::filelist","rake::filetask","rake::fileutilsext","rake::invocationchain","rake::invocationchain::emptyinvocationchain","rake::invocationexceptionmixin","rake::latetime","rake::linkedlist","rake::linkedlist::emptylinkedlist","rake::makefileloader","rake::multitask","rake::namespace","rake::packagetask","rake::privatereader","rake::privatereader::classmethods","rake::rakefileutils","rake::rulerecursionoverflowerror","rake::scope","rake::scope::emptyscope","rake::task","rake::taskargumenterror","rake::taskarguments","rake::tasklib","rake::taskmanager","rake::testtask","rake::win32","rake::win32::win32homeerror","string","rake::filelist#*()","rake::filelist#<<()","rake::earlytime#<=>()","rake::latetime#<=>()","rake::filelist#==()","rake::linkedlist#==()","rake::filelist::[]()","rake::namespace#[]()","rake::task::[]()","rake::taskarguments#[]()","rake::taskmanager#[]()","rake::filelist#add()","rake::task#add_description()","rake::application#add_loader()","rake::add_rakelib()","rake::rulerecursionoverflowerror#add_target()","rake::task#all_prerequisite_tasks()","rake::invocationchain#append()","rake::invocationchain::append()","rake::invocationchain::emptyinvocationchain#append()","rake::application()","rake::application=()","rake::task#arg_names()","rake::invocationexceptionmixin#chain()","rake::invocationexceptionmixin#chain=()","rake::task#clear()","rake::task::clear()","rake::taskmanager#clear()","rake::task#clear_actions()","rake::task#clear_args()","rake::task#clear_comments()","rake::filelist#clear_exclude()","rake::task#clear_prerequisites()","rake::task#comment()","rake::linkedlist#conj()","rake::linkedlist::cons()","rake::linkedlist::emptylinkedlist::cons()","rake::task::create_rule()","rake::taskmanager#current_scope()","rake::packagetask#define()","rake::testtask#define()","rake::task::define_task()","rake::dsl#desc()","rake::dsl#directory()","rake::linkedlist#each()","rake::taskarguments#each()","rake::filelist#egrep()","rake::linkedlist::empty()","rake::linkedlist#empty?()","rake::linkedlist::emptylinkedlist#empty?()","rake::task#enhance()","rake::taskmanager#enhance_with_matching_rule()","rake::filelist#exclude()","rake::filelist#excluded_from_list?()","rake::task#execute()","rake::filelist#existing()","rake::filelist#existing!()","rake::filelist#ext()","string#ext()","rake::taskarguments#extras()","rake::taskarguments#fetch()","rake::dsl#file()","rake::task::format_deps()","rake::task#full_comment()","rake::taskmanager#generate_did_you_mean_suggestions()","rake::taskmanager#generate_message_for_undefined_task()","rake::filelist::glob()","rake::filelist#gsub()","rake::filelist#gsub!()","rake::taskarguments#has_key?()","rake::dsl#import()","rake::taskmanager#in_namespace()","rake::filelist#include()","rake::application#init()","rake::packagetask#init()","rake::linkedlist#inspect()","rake::taskmanager#intern()","rake::task#investigation()","rake::task#invoke()","rake::task#invoke_with_call_chain()","rake::filelist#is_a?()","rake::taskarguments#key?()","rake::filelist#kind_of?()","rake::defaultloader#load()","rake::load_rakefile()","rake::application#load_rakefile()","rake::taskmanager#lookup()","rake::linkedlist::make()","rake::invocationchain#member?()","rake::invocationchain::emptyinvocationchain#member?()","rake::rulerecursionoverflowerror#message()","rake::taskarguments#method_missing()","rake::dsl#multitask()","rake::task#name()","rake::dsl#namespace()","rake::filecreationtask#needed?()","rake::filetask#needed?()","rake::task#needed?()","rake::application::new()","rake::filelist::new()","rake::linkedlist::new()","rake::linkedlist::emptylinkedlist::new()","rake::namespace::new()","rake::packagetask::new()","rake::rulerecursionoverflowerror::new()","rake::task::new()","rake::taskarguments::new()","rake::testtask::new()","rake::taskarguments#new_scope()","rake::fileutilsext#nowrite()","rake::fileutilsext#nowrite()","rake::application#options()","rake::original_dir()","rake::packagetask#package_dir_path()","rake::packagetask#package_name()","rake::filelist#pathmap()","string#pathmap()","string#pathmap_explode()","string#pathmap_partial()","string#pathmap_replace()","rake::task#prerequisite_tasks()","rake::fileutilsext#rake_check_options()","rake::fileutilsext#rake_check_options()","rake::fileutilsext#rake_output_message()","rake::fileutilsext#rake_output_message()","rake::task#reenable()","rake::filelist#resolve()","rake::taskmanager#resolve_args()","fileutils#ruby()","rake::dsl#rule()","rake::application#run()","rake::application#run_with_threads()","fileutils#safe_ln()","rake::namespace#scope()","rake::task::scope_name()","rake::task#set_arg_names()","fileutils#sh()","rake::task#source()","rake::task#sources()","fileutils#split_all()","rake::filelist#sub()","rake::filelist#sub!()","rake::packagetask#tar_bz2_file()","rake::packagetask#tar_gz_file()","rake::packagetask#tar_xz_file()","rake::packagetask#target_dir()","rake::dsl#task()","rake::task::task_defined?()","rake::namespace#tasks()","rake::task::tasks()","rake::taskmanager#tasks()","rake::taskmanager#tasks_in_scope()","rake::testtask#test_files=()","rake::packagetask#tgz_file()","rake::filecreationtask#timestamp()","rake::filetask#timestamp()","rake::task#timestamp()","rake::filelist#to_a()","rake::taskarguments#to_a()","rake::filelist#to_ary()","rake::taskarguments#to_hash()","rake::filelist#to_s()","rake::invocationchain#to_s()","rake::invocationchain::emptyinvocationchain#to_s()","rake::latetime#to_s()","rake::linkedlist#to_s()","rake::task#to_s()","rake::application#top_level()","rake::taskarguments#values_at()","rake::fileutilsext#verbose()","rake::fileutilsext#verbose()","rake::fileutilsext#when_writing()","rake::fileutilsext#when_writing()","rake::with_application()","rake::taskarguments#with_defaults()","rake::packagetask#working_dir()","rake::packagetask#zip_file()","rake::task#|()","","","","","","","","",""],"info":[["FileUtils","","FileUtils.html","",""],["Module","","Module.html","",""],["Object","","Object.html","",""],["Rake","","Rake.html","",""],["Rake::Application","","Rake/Application.html","","<p>Rake main application object.  When invoking <code>rake</code> from the command line, a Rake::Application object is …\n"],["Rake::Cleaner","","Rake/Cleaner.html","",""],["Rake::DSL","","Rake/DSL.html","","<p>DSL is a module that provides #task, #desc, #namespace, etc.  Use this when you’d like to use rake …\n"],["Rake::DefaultLoader","","Rake/DefaultLoader.html","","<p>Default Rakefile loader used by <code>import</code>.\n"],["Rake::EarlyTime","","Rake/EarlyTime.html","","<p>EarlyTime is a fake timestamp that occurs <em>before</em> any other time value.\n"],["Rake::FileCreationTask","","Rake/FileCreationTask.html","","<p>A FileCreationTask is a file task that when used as a dependency will be needed if and only if the file …\n"],["Rake::FileList","","Rake/FileList.html","","<p>A FileList is essentially an array with a few helper methods defined to make file manipulation a bit …\n"],["Rake::FileTask","","Rake/FileTask.html","","<p>A FileTask is a task that includes time based dependencies.  If any of a FileTask’s prerequisites …\n"],["Rake::FileUtilsExt","","Rake/FileUtilsExt.html","","<p>FileUtilsExt provides a custom version of the FileUtils methods that respond to the <code>verbose</code> and <code>nowrite</code> …\n"],["Rake::InvocationChain","","Rake/InvocationChain.html","","<p>InvocationChain tracks the chain of task invocations to detect circular dependencies.\n"],["Rake::InvocationChain::EmptyInvocationChain","","Rake/InvocationChain/EmptyInvocationChain.html","","<p>Null object for an empty chain.\n"],["Rake::InvocationExceptionMixin","","Rake/InvocationExceptionMixin.html","",""],["Rake::LateTime","","Rake/LateTime.html","","<p>LateTime is a fake timestamp that occurs <em>after</em> any other time value.\n"],["Rake::LinkedList","","Rake/LinkedList.html","","<p>Polylithic linked list structure used to implement several data structures in Rake.\n"],["Rake::LinkedList::EmptyLinkedList","","Rake/LinkedList/EmptyLinkedList.html","","<p>Represent an empty list, using the Null Object Pattern.\n<p>When inheriting from the LinkedList class, you …\n"],["Rake::MakefileLoader","","Rake/MakefileLoader.html","","<p>Makefile loader to be used with the import file loader.  Use this to import dependencies from make dependency …\n"],["Rake::MultiTask","","Rake/MultiTask.html","","<p>Same as a regular task, but the immediate prerequisites are done in parallel using Ruby threads.\n"],["Rake::NameSpace","","Rake/NameSpace.html","","<p>The NameSpace class will lookup task names in the scope defined by a <code>namespace</code> command.\n"],["Rake::PackageTask","","Rake/PackageTask.html","","<p>Create a packaging task that will package the project into distributable files (e.g zip archive or tar …\n"],["Rake::PrivateReader","","Rake/PrivateReader.html","",""],["Rake::PrivateReader::ClassMethods","","Rake/PrivateReader/ClassMethods.html","",""],["Rake::RakeFileUtils","","Rake/FileUtilsExt.html","","<p>FileUtilsExt provides a custom version of the FileUtils methods that respond to the <code>verbose</code> and <code>nowrite</code> …\n"],["Rake::RuleRecursionOverflowError","","Rake/RuleRecursionOverflowError.html","","<p>Error indicating a recursion overflow error in task selection.\n"],["Rake::Scope","","Rake/Scope.html","",""],["Rake::Scope::EmptyScope","","Rake/Scope/EmptyScope.html","",""],["Rake::Task","","Rake/Task.html","","<p>A Task is the basic unit of work in a Rakefile.  Tasks have associated actions (possibly more than one) …\n"],["Rake::TaskArgumentError","","Rake/TaskArgumentError.html","","<p>Error indicating an ill-formed task declaration.\n"],["Rake::TaskArguments","","Rake/TaskArguments.html","","<p>TaskArguments manage the arguments passed to a task.\n"],["Rake::TaskLib","","Rake/TaskLib.html","","<p>Base class for Task Libraries.\n"],["Rake::TaskManager","","Rake/TaskManager.html","","<p>The TaskManager module is a mixin for managing tasks.\n"],["Rake::TestTask","","Rake/TestTask.html","","<p>Create a task that runs a set of tests.\n<p>Example:\n\n<pre>require &quot;rake/testtask&quot;\n\nRake::TestTask.new do |t|\n  t.libs ...</pre>\n"],["Rake::Win32","","Rake/Win32.html","",""],["Rake::Win32::Win32HomeError","","Rake/Win32/Win32HomeError.html","",""],["String","","String.html","",""],["*","Rake::FileList","Rake/FileList.html#method-i-2A","(other)","<p>Redefine * to return either a string or a new file list.\n"],["<<","Rake::FileList","Rake/FileList.html#method-i-3C-3C","(obj)",""],["<=>","Rake::EarlyTime","Rake/EarlyTime.html#method-i-3C-3D-3E","(other)","<p>The EarlyTime always comes before <code>other</code>!\n"],["<=>","Rake::LateTime","Rake/LateTime.html#method-i-3C-3D-3E","(other)",""],["==","Rake::FileList","Rake/FileList.html#method-i-3D-3D","(array)","<p>A FileList is equal through array equality.\n"],["==","Rake::LinkedList","Rake/LinkedList.html#method-i-3D-3D","(other)","<p>Lists are structurally equivalent.\n"],["[]","Rake::FileList","Rake/FileList.html#method-c-5B-5D","(*args)","<p>Create a new file list including the files listed. Similar to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">FileList</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">args</span>)\n</pre>\n"],["[]","Rake::NameSpace","Rake/NameSpace.html#method-i-5B-5D","(name)","<p>Lookup a task named <code>name</code> in the namespace.\n"],["[]","Rake::Task","Rake/Task.html#method-c-5B-5D","(task_name)","<p>Return a task with the given name.  If the task is not currently known, try to synthesize one from the …\n"],["[]","Rake::TaskArguments","Rake/TaskArguments.html#method-i-5B-5D","(index)","<p>Find an argument value by name or index.\n"],["[]","Rake::TaskManager","Rake/TaskManager.html#method-i-5B-5D","(task_name, scopes=nil)","<p>Find a matching task for <code>task_name</code>.\n"],["add","Rake::FileList","Rake/FileList.html#method-i-add","(*filenames)",""],["add_description","Rake::Task","Rake/Task.html#method-i-add_description","(description)","<p>Add a description to the task.  The description can consist of an option argument list (enclosed brackets) …\n"],["add_loader","Rake::Application","Rake/Application.html#method-i-add_loader","(ext, loader)","<p>Add a loader to handle imported files ending in the extension <code>ext</code>.\n"],["add_rakelib","Rake","Rake.html#method-c-add_rakelib","(*files)","<p>Add files to the rakelib list\n"],["add_target","Rake::RuleRecursionOverflowError","Rake/RuleRecursionOverflowError.html#method-i-add_target","(target)",""],["all_prerequisite_tasks","Rake::Task","Rake/Task.html#method-i-all_prerequisite_tasks","()","<p>List of all unique prerequisite tasks including prerequisite tasks’ prerequisites. Includes self …\n"],["append","Rake::InvocationChain","Rake/InvocationChain.html#method-i-append","(invocation)","<p>Append an invocation to the chain of invocations. It is an error if the invocation already listed.\n"],["append","Rake::InvocationChain","Rake/InvocationChain.html#method-c-append","(invocation, chain)","<p>Class level append.\n"],["append","Rake::InvocationChain::EmptyInvocationChain","Rake/InvocationChain/EmptyInvocationChain.html#method-i-append","(invocation)",""],["application","Rake","Rake.html#method-c-application","()","<p>Current Rake Application\n"],["application=","Rake","Rake.html#method-c-application-3D","(app)","<p>Set the current Rake application object.\n"],["arg_names","Rake::Task","Rake/Task.html#method-i-arg_names","()","<p>Name of arguments for this task.\n"],["chain","Rake::InvocationExceptionMixin","Rake/InvocationExceptionMixin.html#method-i-chain","()","<p>Return the invocation chain (list of Rake tasks) that were in effect when this exception was detected …\n"],["chain=","Rake::InvocationExceptionMixin","Rake/InvocationExceptionMixin.html#method-i-chain-3D","(value)","<p>Set the invocation chain in effect when this exception was detected.\n"],["clear","Rake::Task","Rake/Task.html#method-i-clear","()","<p>Clear the existing prerequisites, actions, comments, and arguments of a rake task.\n"],["clear","Rake::Task","Rake/Task.html#method-c-clear","()","<p>Clear the task list.  This cause rake to immediately forget all the tasks that have been assigned.  ( …\n"],["clear","Rake::TaskManager","Rake/TaskManager.html#method-i-clear","()","<p>Clear all tasks in this application.\n"],["clear_actions","Rake::Task","Rake/Task.html#method-i-clear_actions","()","<p>Clear the existing actions on a rake task.\n"],["clear_args","Rake::Task","Rake/Task.html#method-i-clear_args","()","<p>Clear the existing arguments on a rake task.\n"],["clear_comments","Rake::Task","Rake/Task.html#method-i-clear_comments","()","<p>Clear the existing comments on a rake task.\n"],["clear_exclude","Rake::FileList","Rake/FileList.html#method-i-clear_exclude","()","<p>Clear all the exclude patterns so that we exclude nothing.\n"],["clear_prerequisites","Rake::Task","Rake/Task.html#method-i-clear_prerequisites","()","<p>Clear the existing prerequisites of a rake task.\n"],["comment","Rake::Task","Rake/Task.html#method-i-comment","()","<p>First line (or sentence) of all comments. Multiple comments are separated by a “/”.\n"],["conj","Rake::LinkedList","Rake/LinkedList.html#method-i-conj","(item)","<p>Polymorphically add a new element to the head of a list. The type of head node will be the same list …\n"],["cons","Rake::LinkedList","Rake/LinkedList.html#method-c-cons","(head, tail)","<p>Cons a new head onto the tail list.\n"],["cons","Rake::LinkedList::EmptyLinkedList","Rake/LinkedList/EmptyLinkedList.html#method-c-cons","(head, tail)",""],["create_rule","Rake::Task","Rake/Task.html#method-c-create_rule","(*args, &block)","<p>Define a rule for synthesizing tasks.\n"],["current_scope","Rake::TaskManager","Rake/TaskManager.html#method-i-current_scope","()","<p>Return the list of scope names currently active in the task manager.\n"],["define","Rake::PackageTask","Rake/PackageTask.html#method-i-define","()","<p>Create the tasks defined by this task library.\n"],["define","Rake::TestTask","Rake/TestTask.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["define_task","Rake::Task","Rake/Task.html#method-c-define_task","(*args, &block)","<p>Define a task given <code>args</code> and an option block.  If a rule with the given name already exists, the prerequisites …\n"],["desc","Rake::DSL","Rake/DSL.html#method-i-desc","(description)","<p>Describes the next rake task.  Duplicate descriptions are discarded. Descriptions are shown with <code>rake</code> …\n"],["directory","Rake::DSL","Rake/DSL.html#method-i-directory","(*args, &block)","<p>Declare a set of files tasks to create the given directories on demand.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">directory</span> <span class=\"ruby-string\">&quot;testdata/doc&quot;</span>\n</pre>\n"],["each","Rake::LinkedList","Rake/LinkedList.html#method-i-each","()","<p>For each item in the list.\n"],["each","Rake::TaskArguments","Rake/TaskArguments.html#method-i-each","(&block)","<p>Enumerates the arguments and their values\n"],["egrep","Rake::FileList","Rake/FileList.html#method-i-egrep","(pattern, *options)","<p>Grep each of the files in the filelist using the given pattern. If a block is given, call the block on …\n"],["empty","Rake::LinkedList","Rake/LinkedList.html#method-c-empty","()","<p>The standard empty list class for the given LinkedList class.\n"],["empty?","Rake::LinkedList","Rake/LinkedList.html#method-i-empty-3F","()","<p>Is the list empty? .make guards against a list being empty making any instantiated LinkedList object …\n"],["empty?","Rake::LinkedList::EmptyLinkedList","Rake/LinkedList/EmptyLinkedList.html#method-i-empty-3F","()",""],["enhance","Rake::Task","Rake/Task.html#method-i-enhance","(deps=nil, &block)","<p>Enhance a task with prerequisites or actions.  Returns self.\n"],["enhance_with_matching_rule","Rake::TaskManager","Rake/TaskManager.html#method-i-enhance_with_matching_rule","(task_name, level=0)","<p>If a rule can be found that matches the task name, enhance the task with the prerequisites and actions …\n"],["exclude","Rake::FileList","Rake/FileList.html#method-i-exclude","(*patterns, &block)","<p>Register a list of file name patterns that should be excluded from the list.  Patterns may be regular …\n"],["excluded_from_list?","Rake::FileList","Rake/FileList.html#method-i-excluded_from_list-3F","(fn)","<p>Should the given file name be excluded from the list?\n<p>NOTE: This method was formerly named “exclude?”, …\n"],["execute","Rake::Task","Rake/Task.html#method-i-execute","(args=nil)","<p>Execute the actions associated with this task.\n"],["existing","Rake::FileList","Rake/FileList.html#method-i-existing","()","<p>Return a new file list that only contains file names from the current file list that exist on the file …\n"],["existing!","Rake::FileList","Rake/FileList.html#method-i-existing-21","()","<p>Modify the current file list so that it contains only file name that exist on the file system.\n"],["ext","Rake::FileList","Rake/FileList.html#method-i-ext","(newext=\"\")","<p>Return a new FileList with <code>String#ext</code> method applied to each member of the array.\n<p>This method is a shortcut …\n"],["ext","String","String.html#method-i-ext","(newext=\"\")","<p>Replace the file extension with <code>newext</code>.  If there is no extension on the string, append the new extension …\n"],["extras","Rake::TaskArguments","Rake/TaskArguments.html#method-i-extras","()","<p>Retrieve the list of values not associated with named arguments\n"],["fetch","Rake::TaskArguments","Rake/TaskArguments.html#method-i-fetch","(*args, &block)",""],["file","Rake::DSL","Rake/DSL.html#method-i-file","(*args, &block)","<p>Declare a file task.\n<p>Example:\n\n<pre> file &quot;config.cfg&quot; =&gt; [&quot;config.template&quot;] do\n   open(&quot;config.cfg&quot;, &quot;w&quot;) do ...</pre>\n"],["format_deps","Rake::Task","Rake/Task.html#method-c-format_deps","(deps)","<p>Format dependencies parameter to pass to task.\n"],["full_comment","Rake::Task","Rake/Task.html#method-i-full_comment","()","<p>Full collection of comments. Multiple comments are separated by newlines.\n"],["generate_did_you_mean_suggestions","Rake::TaskManager","Rake/TaskManager.html#method-i-generate_did_you_mean_suggestions","(task_name)",""],["generate_message_for_undefined_task","Rake::TaskManager","Rake/TaskManager.html#method-i-generate_message_for_undefined_task","(task_name)",""],["glob","Rake::FileList","Rake/FileList.html#method-c-glob","(pattern, *args)","<p>Get a sorted list of files matching the pattern. This method should be preferred to Dir and Dir.glob(pattern) …\n"],["gsub","Rake::FileList","Rake/FileList.html#method-i-gsub","(pat, rep)","<p>Return a new FileList with the results of running <code>gsub</code> against each element of the original list.\n<p>Example: …\n"],["gsub!","Rake::FileList","Rake/FileList.html#method-i-gsub-21","(pat, rep)","<p>Same as <code>gsub</code> except that the original file list is modified.\n"],["has_key?","Rake::TaskArguments","Rake/TaskArguments.html#method-i-has_key-3F","(key)","<p>Returns true if <code>key</code> is one of the arguments\n"],["import","Rake::DSL","Rake/DSL.html#method-i-import","(*fns)","<p>Import the partial Rakefiles <code>fn</code>.  Imported files are loaded <em>after</em> the current file is completely loaded. …\n"],["in_namespace","Rake::TaskManager","Rake/TaskManager.html#method-i-in_namespace","(name)","<p>Evaluate the block in a nested namespace named <code>name</code>.  Create an anonymous namespace if <code>name</code> is nil.\n"],["include","Rake::FileList","Rake/FileList.html#method-i-include","(*filenames)","<p>Add file names defined by glob patterns to the file list.  If an array is given, add each element of …\n"],["init","Rake::Application","Rake/Application.html#method-i-init","(app_name=\"rake\", argv = ARGV)","<p>Initialize the command line parameters and app name.\n"],["init","Rake::PackageTask","Rake/PackageTask.html#method-i-init","(name, version)","<p>Initialization that bypasses the “yield self” and “define” step.\n"],["inspect","Rake::LinkedList","Rake/LinkedList.html#method-i-inspect","()","<p>Same as <code>to_s</code>, but with inspected items.\n"],["intern","Rake::TaskManager","Rake/TaskManager.html#method-i-intern","(task_class, task_name)","<p>Lookup a task.  Return an existing task if found, otherwise create a task of the current type.\n"],["investigation","Rake::Task","Rake/Task.html#method-i-investigation","()","<p>Return a string describing the internal state of a task.  Useful for debugging.\n"],["invoke","Rake::Task","Rake/Task.html#method-i-invoke","(*args)","<p>Invoke the task if it is needed.  Prerequisites are invoked first.\n"],["invoke_with_call_chain","Rake::Task","Rake/Task.html#method-i-invoke_with_call_chain","(task_args, invocation_chain)","<p>Same as invoke, but explicitly pass a call chain to detect circular dependencies.\n<p>If multiple tasks depend …\n"],["is_a?","Rake::FileList","Rake/FileList.html#method-i-is_a-3F","(klass)","<p>Lie about our class.\n"],["key?","Rake::TaskArguments","Rake/TaskArguments.html#method-i-key-3F","(key)",""],["kind_of?","Rake::FileList","Rake/FileList.html#method-i-kind_of-3F","(klass)",""],["load","Rake::DefaultLoader","Rake/DefaultLoader.html#method-i-load","(fn)","<p>Loads a rakefile into the current application from <code>fn</code>\n"],["load_rakefile","Rake","Rake.html#method-c-load_rakefile","(path)","<p>Load a rakefile.\n"],["load_rakefile","Rake::Application","Rake/Application.html#method-i-load_rakefile","()","<p>Find the rakefile and then load it and any pending imports.\n"],["lookup","Rake::TaskManager","Rake/TaskManager.html#method-i-lookup","(task_name, initial_scope=nil)","<p>Lookup a task, using scope and the scope hints in the task name. This method performs straight lookups …\n"],["make","Rake::LinkedList","Rake/LinkedList.html#method-c-make","(*args)","<p>Make a list out of the given arguments. This method is polymorphic\n"],["member?","Rake::InvocationChain","Rake/InvocationChain.html#method-i-member-3F","(invocation)","<p>Is the invocation already in the chain?\n"],["member?","Rake::InvocationChain::EmptyInvocationChain","Rake/InvocationChain/EmptyInvocationChain.html#method-i-member-3F","(obj)",""],["message","Rake::RuleRecursionOverflowError","Rake/RuleRecursionOverflowError.html#method-i-message","()",""],["method_missing","Rake::TaskArguments","Rake/TaskArguments.html#method-i-method_missing","(sym, *args)","<p>Returns the value of the given argument via method_missing\n"],["multitask","Rake::DSL","Rake/DSL.html#method-i-multitask","(*args, &block)","<p>Declare a task that performs its prerequisites in parallel. Multitasks does <strong>not</strong> guarantee that its prerequisites …\n"],["name","Rake::Task","Rake/Task.html#method-i-name","()","<p>Name of the task, including any namespace qualifiers.\n"],["namespace","Rake::DSL","Rake/DSL.html#method-i-namespace","(name=nil, &block)","<p>Create a new rake namespace and use it for evaluating the given block.  Returns a NameSpace object that …\n"],["needed?","Rake::FileCreationTask","Rake/FileCreationTask.html#method-i-needed-3F","()","<p>Is this file task needed?  Yes if it doesn’t exist.\n"],["needed?","Rake::FileTask","Rake/FileTask.html#method-i-needed-3F","()","<p>Is this file task needed?  Yes if it doesn’t exist, or if its time stamp is out of date.\n"],["needed?","Rake::Task","Rake/Task.html#method-i-needed-3F","()","<p>Is this task needed?\n"],["new","Rake::Application","Rake/Application.html#method-c-new","()","<p>Initialize a Rake::Application object.\n"],["new","Rake::FileList","Rake/FileList.html#method-c-new","(*patterns)","<p>Create a file list from the globbable patterns given.  If you wish to perform multiple includes or excludes …\n"],["new","Rake::LinkedList","Rake/LinkedList.html#method-c-new","(head, tail=EMPTY)",""],["new","Rake::LinkedList::EmptyLinkedList","Rake/LinkedList/EmptyLinkedList.html#method-c-new","()",""],["new","Rake::NameSpace","Rake/NameSpace.html#method-c-new","(task_manager, scope_list)","<p>Create a namespace lookup object using the given task manager and the list of scopes.\n"],["new","Rake::PackageTask","Rake/PackageTask.html#method-c-new","(name=nil, version=nil)","<p>Create a Package Task with the given name and version.  Use <code>:noversion</code> as the version to build a package …\n"],["new","Rake::RuleRecursionOverflowError","Rake/RuleRecursionOverflowError.html#method-c-new","(*args)",""],["new","Rake::Task","Rake/Task.html#method-c-new","(task_name, app)","<p>Create a task named <code>task_name</code> with no actions or prerequisites. Use <code>enhance</code> to add actions and prerequisites. …\n"],["new","Rake::TaskArguments","Rake/TaskArguments.html#method-c-new","(names, values, parent=nil)","<p>Create a TaskArgument object with a list of argument <code>names</code> and a set of associated <code>values</code>.  <code>parent</code> is …\n"],["new","Rake::TestTask","Rake/TestTask.html#method-c-new","(name=:test)","<p>Create a testing task.\n"],["new_scope","Rake::TaskArguments","Rake/TaskArguments.html#method-i-new_scope","(names)","<p>Create a new argument scope using the prerequisite argument names.\n"],["nowrite","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-nowrite","(value=nil)","<p>Get/set the nowrite flag controlling output from the FileUtils utilities.  If verbose is true, then the …\n"],["nowrite","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-nowrite","(value=nil)","<p>Get/set the nowrite flag controlling output from the FileUtils utilities.  If verbose is true, then the …\n"],["options","Rake::Application","Rake/Application.html#method-i-options","()","<p>Application options from the command line\n"],["original_dir","Rake","Rake.html#method-c-original_dir","()","<p>Return the original directory where the Rake application was started.\n"],["package_dir_path","Rake::PackageTask","Rake/PackageTask.html#method-i-package_dir_path","()","<p>The directory this package will be built in\n"],["package_name","Rake::PackageTask","Rake/PackageTask.html#method-i-package_name","()","<p>The name of this package\n"],["pathmap","Rake::FileList","Rake/FileList.html#method-i-pathmap","(spec=nil, &block)","<p>Apply the pathmap spec to each of the included file names, returning a new file list with the modified …\n"],["pathmap","String","String.html#method-i-pathmap","(spec=nil, &block)","<p>Map the path according to the given specification.  The specification controls the details of the mapping. …\n"],["pathmap_explode","String","String.html#method-i-pathmap_explode","()","<p>Explode a path into individual components.  Used by <code>pathmap</code>.\n<p>This String extension comes from Rake\n"],["pathmap_partial","String","String.html#method-i-pathmap_partial","(n)","<p>Extract a partial path from the path.  Include <code>n</code> directories from the front end (left hand side) if  …\n"],["pathmap_replace","String","String.html#method-i-pathmap_replace","(patterns, &block)","<p>Perform the pathmap replacement operations on the given path. The patterns take the form ‘pat1,rep1;pat2,rep2…’. …\n"],["prerequisite_tasks","Rake::Task","Rake/Task.html#method-i-prerequisite_tasks","()","<p>List of prerequisite tasks\n"],["rake_check_options","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-rake_check_options","(options, *optdecl)","<p>Check that the options do not contain options not listed in <code>optdecl</code>.  An ArgumentError exception is thrown …\n"],["rake_check_options","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-rake_check_options","(options, *optdecl)","<p>Check that the options do not contain options not listed in <code>optdecl</code>.  An ArgumentError exception is thrown …\n"],["rake_output_message","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-rake_output_message","(message)","<p>Send the message to the default rake output (which is $stderr).\n"],["rake_output_message","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-rake_output_message","(message)","<p>Send the message to the default rake output (which is $stderr).\n"],["reenable","Rake::Task","Rake/Task.html#method-i-reenable","()","<p>Reenable the task, allowing its tasks to be executed if the task is invoked again.\n"],["resolve","Rake::FileList","Rake/FileList.html#method-i-resolve","()","<p>Resolve all the pending adds now.\n"],["resolve_args","Rake::TaskManager","Rake/TaskManager.html#method-i-resolve_args","(args)","<p>Resolve the arguments for a task/rule.  Returns a tuple of [task_name, arg_name_list, prerequisites, …\n"],["ruby","FileUtils","FileUtils.html#method-i-ruby","(*args, **options, &block)","<p>Run a Ruby interpreter with the given arguments.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ruby</span> <span class=\"ruby-string\">%{-pe &#39;$_.upcase!&#39; &lt;README}</span>\n</pre>\n"],["rule","Rake::DSL","Rake/DSL.html#method-i-rule","(*args, &block)","<p>Declare a rule for auto-tasks.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rule</span> <span class=\"ruby-string\">&#39;.o&#39;</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-string\">&#39;.c&#39;</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">t</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">sh</span> <span class=\"ruby-string\">&#39;cc&#39;</span>, <span class=\"ruby-string\">&#39;-o&#39;</span>, <span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">source</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["run","Rake::Application","Rake/Application.html#method-i-run","(argv = ARGV)","<p>Run the Rake application.  The run method performs the following three steps:\n<p>Initialize the command line …\n"],["run_with_threads","Rake::Application","Rake/Application.html#method-i-run_with_threads","()","<p>Run the given block with the thread startup and shutdown.\n"],["safe_ln","FileUtils","FileUtils.html#method-i-safe_ln","(*args, **options)","<p>Attempt to do a normal file link, but fall back to a copy if the link fails.\n"],["scope","Rake::NameSpace","Rake/NameSpace.html#method-i-scope","()","<p>The scope of the namespace (a LinkedList)\n"],["scope_name","Rake::Task","Rake/Task.html#method-c-scope_name","(scope, task_name)","<p>Apply the scope to the task name according to the rules for this kind of task.  Generic tasks will accept …\n"],["set_arg_names","Rake::Task","Rake/Task.html#method-i-set_arg_names","(args)","<p>Set the names of the arguments for this task. <code>args</code> should be an array of symbols, one for each argument …\n"],["sh","FileUtils","FileUtils.html#method-i-sh","(*cmd, &block)","<p>Run the system command <code>cmd</code>.  If multiple arguments are given the command is run directly (without the …\n"],["source","Rake::Task","Rake/Task.html#method-i-source","()","<p>First source from a rule (nil if no sources)\n"],["sources","Rake::Task","Rake/Task.html#method-i-sources","()",""],["split_all","FileUtils","FileUtils.html#method-i-split_all","(path)","<p>Split a file path into individual directory names.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">split_all</span>(<span class=\"ruby-string\">&quot;a/b/c&quot;</span>) <span class=\"ruby-operator\">=&gt;</span>  [<span class=\"ruby-string\">&#39;a&#39;</span>, <span class=\"ruby-string\">&#39;b&#39;</span>, <span class=\"ruby-string\">&#39;c&#39;</span>]\n</pre>\n"],["sub","Rake::FileList","Rake/FileList.html#method-i-sub","(pat, rep)","<p>Return a new FileList with the results of running <code>sub</code> against each element of the original list.\n<p>Example: …\n"],["sub!","Rake::FileList","Rake/FileList.html#method-i-sub-21","(pat, rep)","<p>Same as <code>sub</code> except that the original file list is modified.\n"],["tar_bz2_file","Rake::PackageTask","Rake/PackageTask.html#method-i-tar_bz2_file","()","<p>The package name with .tar.bz2 added\n"],["tar_gz_file","Rake::PackageTask","Rake/PackageTask.html#method-i-tar_gz_file","()","<p>The package name with .tar.gz added\n"],["tar_xz_file","Rake::PackageTask","Rake/PackageTask.html#method-i-tar_xz_file","()","<p>The package name with .tar.xz added\n"],["target_dir","Rake::PackageTask","Rake/PackageTask.html#method-i-target_dir","()","<p>target directory relative to working_dir\n"],["task","Rake::DSL","Rake/DSL.html#method-i-task","(*args, &block)","<p>Declare a basic task.  The <code>task_name</code> is always the first argument.  If the task name contains a “:” …\n"],["task_defined?","Rake::Task","Rake/Task.html#method-c-task_defined-3F","(task_name)","<p>TRUE if the task name is already defined.\n"],["tasks","Rake::NameSpace","Rake/NameSpace.html#method-i-tasks","()","<p>Return the list of tasks defined in this and nested namespaces.\n"],["tasks","Rake::Task","Rake/Task.html#method-c-tasks","()","<p>List of all defined tasks.\n"],["tasks","Rake::TaskManager","Rake/TaskManager.html#method-i-tasks","()","<p>List of all defined tasks in this application.\n"],["tasks_in_scope","Rake::TaskManager","Rake/TaskManager.html#method-i-tasks_in_scope","(scope)","<p>List of all the tasks defined in the given scope (and its sub-scopes).\n"],["test_files=","Rake::TestTask","Rake/TestTask.html#method-i-test_files-3D","(list)","<p>Explicitly define the list of test files to be included in a test.  <code>list</code> is expected to be an array of …\n"],["tgz_file","Rake::PackageTask","Rake/PackageTask.html#method-i-tgz_file","()","<p>The package name with .tgz added\n"],["timestamp","Rake::FileCreationTask","Rake/FileCreationTask.html#method-i-timestamp","()","<p>Time stamp for file creation task.  This time stamp is earlier than any other time stamp.\n"],["timestamp","Rake::FileTask","Rake/FileTask.html#method-i-timestamp","()","<p>Time stamp for file task.\n"],["timestamp","Rake::Task","Rake/Task.html#method-i-timestamp","()","<p>Timestamp for this task.  Basic tasks return the current time for their time stamp.  Other tasks can …\n"],["to_a","Rake::FileList","Rake/FileList.html#method-i-to_a","()","<p>Return the internal array object.\n"],["to_a","Rake::TaskArguments","Rake/TaskArguments.html#method-i-to_a","()","<p>Retrieve the complete array of sequential values\n"],["to_ary","Rake::FileList","Rake/FileList.html#method-i-to_ary","()","<p>Return the internal array object.\n"],["to_hash","Rake::TaskArguments","Rake/TaskArguments.html#method-i-to_hash","()","<p>Returns a Hash of arguments and their values\n"],["to_s","Rake::FileList","Rake/FileList.html#method-i-to_s","()","<p>Convert a FileList to a string by joining all elements with a space.\n"],["to_s","Rake::InvocationChain","Rake/InvocationChain.html#method-i-to_s","()","<p>Convert to string, ie: TOP =&gt; invocation =&gt; invocation\n"],["to_s","Rake::InvocationChain::EmptyInvocationChain","Rake/InvocationChain/EmptyInvocationChain.html#method-i-to_s","()",""],["to_s","Rake::LateTime","Rake/LateTime.html#method-i-to_s","()",""],["to_s","Rake::LinkedList","Rake/LinkedList.html#method-i-to_s","()","<p>Convert to string: LL(item, item…)\n"],["to_s","Rake::Task","Rake/Task.html#method-i-to_s","()","<p>Return task name\n"],["top_level","Rake::Application","Rake/Application.html#method-i-top_level","()","<p>Run the top level tasks of a Rake application.\n"],["values_at","Rake::TaskArguments","Rake/TaskArguments.html#method-i-values_at","(*keys)","<p>Extracts the argument values at <code>keys</code>\n"],["verbose","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-verbose","(value=nil)","<p>Get/set the verbose flag controlling output from the FileUtils utilities.  If verbose is true, then the …\n"],["verbose","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-verbose","(value=nil)","<p>Get/set the verbose flag controlling output from the FileUtils utilities.  If verbose is true, then the …\n"],["when_writing","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-when_writing","(msg=nil)","<p>Use this function to prevent potentially destructive ruby code from running when the :nowrite flag is …\n"],["when_writing","Rake::FileUtilsExt","Rake/FileUtilsExt.html#method-i-when_writing","(msg=nil)","<p>Use this function to prevent potentially destructive ruby code from running when the :nowrite flag is …\n"],["with_application","Rake","Rake.html#method-c-with_application","(block_application = Rake::Application.new)","<p>Make <code>block_application</code> the default rake application inside a block so you can load rakefiles into a different …\n"],["with_defaults","Rake::TaskArguments","Rake/TaskArguments.html#method-i-with_defaults","(defaults)","<p>Specify a hash of default values for task arguments. Use the defaults only if there is no specific value …\n"],["working_dir","Rake::PackageTask","Rake/PackageTask.html#method-i-working_dir","()",""],["zip_file","Rake::PackageTask","Rake/PackageTask.html#method-i-zip_file","()","<p>The package name with .zip added\n"],["|","Rake::Task","Rake/Task.html#method-i-7C","(deps)","<p>Add order only dependencies.\n"],["CONTRIBUTING","","CONTRIBUTING_rdoc.html","","<p>Source Repository\n<p>Rake is hosted at GitHub. The GitHub Web page is github.com/ruby/rake . The public  …\n"],["History","","History_rdoc.html","","<p>13.0.6\n<p>Additional fix for #389 Pull request #390 by hsbt\n\n<p>13.0.5\n"],["MIT-LICENSE","","MIT-LICENSE.html","","<p>Copyright © Jim Weirich\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy …\n"],["README","","README_rdoc.html","","<p>RAKE – Ruby Make\n<p>home  &mdash; github.com/ruby/rake\n<p>bugs  &mdash; github.com/ruby/rake/issues\n"],["command_line_usage","","doc/command_line_usage_rdoc.html","","<p>Rake Command Line Usage\n<p>Rake is invoked from the command line using:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">% rake </span>[<span class=\"ruby-identifier\">options</span> <span class=\"ruby-operator\">...</span>]  [<span class=\"ruby-constant\">VAR</span>=<span class=\"ruby-constant\">VALUE</span> <span class=\"ruby-operator\">...</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["glossary","","doc/glossary_rdoc.html","","<p>Glossary\n<p>action  &mdash; Code to be executed in order to perform a task.  Actions in a Rakefile are specified …\n"],["proto_rake","","doc/proto_rake_rdoc.html","","<p>Original Prototype Rake\n<p>This is the original 100 line prototype rake program.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\">#!/usr/bin/env ruby</span>\n\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rakefile","","doc/rakefile_rdoc.html","","<p>Rakefile Format\n<p>First of all, there is no special format for a Rakefile.  A Rakefile contains executable …\n"],["rational","","doc/rational_rdoc.html","","<p>Why rake?\n<p>Ok, let me state from the beginning that I never intended to write this code.  I’m not convinced …\n"]]}}